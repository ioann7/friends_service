openapi: 3.0.2
info:
  title: Friends Service API
  version: 1.0.0
paths:
  /api/users/:
    get:
      operationId: Список пользователей
      summary: Список пользователей
      description: ''
      parameters:
        - name: page
          required: false
          in: query
          description: Номер страницы.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                    description: 'Общее количество объектов в базе'
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/?page=4
                    description: 'Ссылка на следующую страницу'
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/?page=2
                    description: 'Ссылка на предыдущую страницу'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: 'Список объектов текущей страницы'
          description: ''
      tags:
        - Пользователи
    post:
      operationId: Регистрация нового пользователя
      summary: Регистрация нового пользователя
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Пользователь успешно создан'
        '400':
          $ref: '#/components/responses/ValidationError'
      tags:
        - Пользователи

  /api/users/{id}/:
    get:
      operationId: Профиль пользователя
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный id этого пользователя"
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи

  /api/users/{id}/subscribe/:
    post:
      operationId: Подписаться на пользователя
      summary: Подписаться на пользователя
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      friendship_status:
                        example: есть исходящая заявка
          description: 'Подписка успешно создана'
        '400':
          description: 'Ошибка подписки (Например, если уже подписан или при подписке на себя самого)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfMadeError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Подписки
    delete:
      operationId: Отписаться от пользователя
      summary: Отписаться от пользователя
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
      responses:
        '204':
          description: 'Успешная отписка'
        '400':
          description: 'Ошибка отписки (Например, если не был подписан)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfMadeError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'

      tags:
        - Подписки

  /api/users/{id}/subscribers/:
    get:
      operationId: Список подписчиков (Входящие заявки)
      summary: Список подписчиков (Входящие заявки)
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: Номер страницы.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                    description: 'Общее количество объектов в базе'
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.org/api/users/1/subscribers/?page=4
                    description: 'Ссылка на следующую страницу'
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.org/api/users/1/subscribers/?page=2
                    description: 'Ссылка на предыдущую страницу'
                  results:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                          properties:
                            friendship_status:
                              example: есть входящая заявка
                        
                    description: 'Список объектов текущей страницы'
          description: ''
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Подписки

  /api/users/{id}/subscribers/{subscriber_id}/:
    delete:
      operationId: Удалить из подписчиков
      summary: Удалить из подписчиков
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
        - name: subscriber_id
          in: path
          required: true
          description: "Уникальный идентификатор подписчика."
          schema:
            type: string
      responses:
        '204':
          description: 'Успешно удален подписчик'
        '400':
          description: 'Ошибка удаления подписчика (Например, если не был подписан)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfMadeError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'

      tags:
        - Подписки

  /api/users/{id}/subscriptions/:
    get:
      operationId: Список подписок (Исходящие заявки)
      summary: Список подписок (Исходящие заявки)
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: Номер страницы.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                    description: 'Общее количество объектов в базе'
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/1/subscriptions/?page=4
                    description: 'Ссылка на следующую страницу'
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/1/subscriptions/?page=2
                    description: 'Ссылка на предыдущую страницу'
                  results:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                          properties:
                            friendship_status:
                              example: есть исходящая заявка
                    description: 'Список объектов текущей страницы'
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Подписки
  
  /api/users/{id}/friends/:
    get:
      operationId: Список друзей (Когда оба подписаны на друг друга)
      summary: Список друзей (Когда оба подписаны на друг друга)
      description: 'Доступно только авторизованным пользователям'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого пользователя."
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: Номер страницы.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                    description: 'Общее количество объектов в базе'
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/1/friends/?page=4
                    description: 'Ссылка на следующую страницу'
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://vk.example.com/api/users/1/friends/?page=2
                    description: 'Ссылка на предыдущую страницу'
                  results:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                          properties:
                            friendship_status:
                              example: уже друзья
                    description: 'Список объектов текущей страницы'
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Подписки

  /api/auth/token/login/:
    post:
      operationId: Получить токен авторизации
      summary: Получить токен авторизации
      description: Используется для авторизации по юзернейму и паролю, чтобы далее использовать токен при запросах.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGetResponse'
          description: ''
      tags:
        - Пользователи

  /api/auth/token/logout/:
    post:
      operationId: Удаление токена
      summary: Удаление токена
      description: Удаляет токен текущего пользователя
      security:
        - Token: [ ]
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}

      responses:
        '204':
          content:
            application/json:
              schema: {}
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: "Уникальное имя пользователя"
          pattern: ^[\w.@+-]+\z
          maxLength: 150
          example: "vasya.pupkin"
        friendship_status:
          type: string
          enum:
            - нет ничего
            - есть исходящая заявка
            - есть входящая заявка
            - уже друзья
          readOnly: true
          description: "Статус дружбы"
          example: нет ничего
      required:
        - username

    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: "Уникальное имя пользователя"
          pattern: ^[\w.@+-]+\z
          maxLength: 150
          example: "vasya.pupkin"
        password:
          type: string
          maxLength: 150
          description: "Пароль"
          example: "Qwerty123"
      required:
        - username
        - password

    TokenCreate:
      type: object
      properties:
        password:
          type: string
        username:
          type: string

    TokenGetResponse:
      type: object
      properties:
        auth_token:
          type: string

    ValidationError:
      description: Стандартные ошибки валидации DRF
      type: object
      properties:
        field_name:
          description: 'Название поля, в котором произошли ошибки. Таких полей может быть несколько'
          example: [ 'Обязательное поле.' ]
          type: array
          items:
            type: string

    SelfMadeError:
      description: Ошибка
      type: object
      properties:
        errors:
          description: 'Описание ошибки'
          type: string

    AuthenticationError:
      description: Пользователь не авторизован
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Учетные данные не были предоставлены."
          type: string

    NotFound:
      description: Объект не найден
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Страница не найдена."
          type: string

  responses:
    ValidationError:
      description: 'Стандартные ошибки валидации DRF.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    AuthenticationError:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'

    NotFound:
      description: Объект не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'


  securitySchemes:
    Token:
      description: 'Авторизация по токену. <br>
      Все запросы от имени пользователя должны выполняться с заголовком "Authorization: Token TOKENVALUE"'
      type: http
      scheme: token